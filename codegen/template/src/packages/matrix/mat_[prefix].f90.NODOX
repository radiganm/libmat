!! mat_{{prefix}}.f90
!! Copyright 2016 Mac Radigan
!! All Rights Reserved
!! {{notice}}

  module mat_{{prefix}}

    use mat
    use dispmodule
    use iso_c_binding
    implicit none

   !public  :: init
    public  :: eye
    public  :: alloc
    public  :: show
    public  :: show_named

  contains

   !subroutine init(p)
   !  
   !  type(c_ptr), intent(inout)                :: p
   !  type({{ftype}}), dimension(:,:), allocatable :: x(:,:) 
   !  allocate(x)
   !  p = c_loc(x)
   !  
   !end subroutine init

    subroutine alloc(p, n1, n2)
      
      type(c_ptr), intent(inout)                               :: p
      type(integer*8), intent(in)                              :: n1
      type(integer*8), intent(in)                              :: n2
     !type({{ftype}}), dimension(:,:), pointer                    :: x(:,:) 
      type({{ftype}}), dimension(:,:), pointer                    :: x
      allocate(x(n1,n2))
     !p = c_loc(x)
      
    end subroutine alloc

    subroutine eye(x)
      
      type({{ftype}}), dimension(:,:), allocatable, intent(inout) :: x(:,:) 
      type(integer*8)                                          :: k
      forall(k=1:size(x,1)) x(k,k) = 1.0
      
    end subroutine eye

    subroutine show(x)
      
      type({{ftype}}), dimension(:,:), allocatable, intent(in) :: x(:,:) 
      type(disp_settings)                                   :: ds
      ds = disp_get()
      call disp_set(unit=8)
      call disp_set_factory
      call disp_set(digmax=5)
      call disp_set(zeroas='*')
      call disp_set(matsep=' | ')
      call disp('', x)
    end subroutine show

    subroutine show_named(x, sname_length, sname)
      
      type({{ftype}}), dimension(:,:), allocatable, intent(in) :: x(:,:) 
      integer(c_size_t), intent(in), value                  :: sname_length
      type(c_ptr), intent(in), value                        :: sname
      character(kind=c_char,len=sname_length), pointer      :: xname
      type(disp_settings)                                   :: ds
      ds = disp_get()
     !call disp_set_factory
     !call disp_set(unit=8)
      call disp_set(zeroas='*')
      call disp_set(digmax=5)
      call disp_set(style='-pad')
      call disp_set(matsep=' | ')
      call c_f_pointer(sname, xname)
      call disp(xname, x)
      
    end subroutine show_named


  end module mat_{{prefix}}

!! *EOF*
